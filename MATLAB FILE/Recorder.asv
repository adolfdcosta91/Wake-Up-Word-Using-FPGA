function varargout = Recorder(varargin)
% RECORDER MATLAB code for Recorder.fig
%------------------------------------------------------------------------------------------------------------------
% Name: Adolf A D'costa 
% Prof
%
%      RECORDER, by itself, creates a new RECORDER or raises the existing
%      singleton*.
%
%      H = RECORDER returns the handle to a new RECORDER or the handle to
%      the existing singleton*.
%
%      RECORDER('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in RECORDER.M with the given input arguments.
%
%      RECORDER('Property','Value',...) creates a new RECORDER or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before Recorder_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to Recorder_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help Recorder

% Last Modified by GUIDE v2.5 05-Dec-2019 14:26:26

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @Recorder_OpeningFcn, ...
                   'gui_OutputFcn',  @Recorder_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before Recorder is made visible.
function Recorder_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to Recorder (see VARARGIN)

% Choose default command line output for Recorder
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes Recorder wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = Recorder_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in pushbutton1.
function pushbutton1_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

disp('CSE - 5570 - Wake Up Word Using FPGA');
disp('Name: Adolf A Dcosta');
disp('Topic Date: Dec 1st 2019');

% Code for cpturing the voice signal

% Record your voice for 1 seconds.
recObj = audiorecorder;
disp('Start of Recording..');
recordblocking(recObj, 1);
disp('End of Recording..');

% Store data in double-precision array.
y = getaudiodata(recObj);
Fs = 8000;
Nsamps = length(y);
t = (1/Fs)*(1:Nsamps);          %Prepare time data for plot
y = y .* hamming(length(y));

%Do Fourier Transform
y_fft = abs(fft(y));            %Retain Magnitude
y_fft = y_fft(1:Nsamps/2);      %Discard Half of Points
f = Fs*(0:Nsamps/2-1)/Nsamps;   %Prepare freq data for plot
y_fft= int8(y_fft);

%Plot Voice in Time Domain
%subplot(2,1,1)
figure(1)
plot(t, y)
xlim([0 1])
xlabel('Time (s)')
ylabel('Amplitude')
title('Human Voice')

%Plot Voice File in Frequency Domain
figure(2)
subplot(2,1,2)
plot(f, y_fft)
xlim([0 1000])
xlabel('Frequency (Hz)')
ylabel('Amplitude')
title('Frequency Response of Human Voice')

%s = serial('/dev/ttyUSB0' ,'BaudRate', 9600);
%s = serial('COM1')
s = serial('COM6' ,'BaudRate', 9600);
for i = 1:1000 
    fopen(s);
    fwrite(s,y_fft(i));
    fclose(s);
    disp(i)
end


